package com.facade;

/**
 * 外观模式测试
 * 隐藏了系统的复杂性，并向客户端提供了一个可以访问系统的接口。这种类型的设计模式属于结构性模式。
 * 为子系统中的一组接口提供了一个统一的访问接口，这个接口使得子系统更容易被访问或者使用
 * 简单来说，该模式就是把一些复杂的流程封装成一个接口供给外部用户更简单的使用。这个模式中，设计到3个角色。
 　　1）.门面角色：外观模式的核心。它被客户角色调用，它熟悉子系统的功能。内部根据客户角色的需求预定了几种功能的组合。
 　　2）.子系统角色:实现了子系统的功能。它对客户角色和Facade时未知的。它内部可以有系统内的相互交互，也可以由供外界调用的接口。
 　　3）.客户角色:通过调用Facede来完成要实现的功能。

 * 从上面的实例来看，有了这个Facade类，也就是Computer类，用户就不用亲自去调用子系统中的Disk,Memory、CPU类了，
 * 不需要知道系统内部的实现细节，甚至都不用知道系统内部的构成。客户端只需要跟Facade交互就可以了
 */
public class Test {
    public static void main(String[] args) {
        Computer computer = new Computer();
        computer.startUp();
        computer.shutDown();
    }
}
